// Code generated by Boiler; DO NOT EDIT. {{$modelName := .ModelName}}

package storage

import (
  {{- range .ModelMethodsPackages}}
  {{.ImportAlias}} "{{.ImportLine}}"
  {{- end}}
)

func (s *Storage) List{{$modelName}}(ctx context.Context, input List{{$modelName}}Input) ([]*models.{{$modelName}}, error) {
  builder := br.NewSelectBuilder().
    Columns(
      {{- range .ModelFields}}
      string({{.FieldName}}_{{$modelName}}_Field),
      {{- end}}
    ).
    From(string({{$modelName}}_TableName))

  if err := input.Pagination.validate(); err != nil {
    return nil, fmt.Errorf("pagination.Validate: %w", err)
  }

  offset, limit := input.Pagination.orDefault().toOffsetLimit()
  builder = builder.Offset(offset).Limit(limit)

  if input.Sort != nil {
    builder = builder.OrderBy(input.Sort.{{toLowerCamelCase $modelName}}Sort())
  }

  if filters := input.Filters; filters != nil {
    {{- range $modelField := .ModelFields}}
    {{- range .ModelsFieldFilters}}
    if {{.FilterIfStmt}} {
      builder = builder.Where(sq.{{.FilterSqOperator}}{string({{$modelField.FieldName}}_{{$modelName}}_Field): filters.{{.FilterName}}{{.FilterTypeSuffix}}})
    }
    {{- end}}
    {{- end}}
  }

  return pg.DoQueryContext[*models.{{$modelName}}](ctx, s.client.Executor(ctx), builder)
}

func (s *Storage) {{$modelName}}(ctx context.Context, input {{$modelName}}Input) (*models.{{$modelName}}, error) {
  builder := br.NewSelectBuilder().
    Columns(
      {{- range .ModelFields}}
      string({{.FieldName}}_{{$modelName}}_Field),
      {{- end}}
    ).
    From(string({{$modelName}}_TableName))

  if filters := input.Filters; filters != nil {
    {{- range $modelField := .ModelFields}}
    {{- range .ModelFieldFilters}}
    if {{.FilterIfStmt}} {
      builder = builder.Where(sq.Eq{string({{$modelField.FieldName}}_{{$modelName}}_Field): filters.{{.FilterName}}{{.FilterTypeSuffix}}})
    }
    {{- end}}
    {{- end}}
  }

  model, err := pg.DoQueryContext[*models.{{$modelName}}](ctx, s.client.Executor(ctx), builder)
  if err != nil {
    return nil, err
  }

  return model[0], nil
}

func (s *Storage) Create{{$modelName}}(ctx context.Context, input Create{{$modelName}}Input) (*models.{{$modelName}}, error) {
  builder := br.NewInsertBuilder().
    Into(string({{$modelName}}_TableName))

  fields := map[string]any{
    {{- range .ModelFields}}
    {{- if eq .NotNullField true}}
    {{- if eq .WithDefaultField false}}
    string({{.FieldName}}_{{$modelName}}_Field): input.{{.FieldName}},
    {{- end}}
    {{- end}}
    {{- end}}
  }

  {{- range $modelField := .ModelFields}}
  {{- if eq .NotNullField false}}
  {{- if eq .WithDefaultField false}}
  if {{.FieldIfStmt}} {
    fields[string({{$modelField.FieldName}}_{{$modelName}}_Field)] = input.{{.FieldName}}{{.FieldTypeSuffix}}
  }
  {{- end}}
  {{- end}}
  {{- end}}

  builder = builder.SetMap(fields).
    Suffix(suffixReturning)

  model, err := pg.DoQueryContext[*models.{{$modelName}}](ctx, s.client.Executor(ctx), builder)
  if err != nil {
    return nil, err
  }
  return model[0], nil
}

func (s *Storage) Update{{$modelName}}(ctx context.Context, input Update{{$modelName}}Input) (*models.{{$modelName}}, error) {
  builder := br.NewUpdateBuilder().
    Table(string({{$modelName}}_TableName))

  fields := map[string]any{}

  {{- range .ModelFields}}
  {{- if ne .FieldBadge "pk"}}
  if {{.FieldZeroTypeIfStmt}} {
    fields[string({{.FieldName}}_{{$modelName}}_Field)] = input.{{.FieldName}}{{.FieldZeroTypeSuffix}}
  }
  {{- end}}
  {{- end}}

  builder = builder.
    SetMap(fields).
    {{- range .ModelFields}}
    {{- if eq .FieldBadge "pk"}}
    Where(sq.Eq{string({{.FieldName}}_{{$modelName}}_Field): input.{{.FieldName}}}).
    {{- end}}
    {{- end}}
    Suffix(suffixReturning)

  model, err := pg.DoQueryContext[*models.{{$modelName}}](ctx, s.client.Executor(ctx), builder)
  if err != nil {
    return nil, err
  }
  return model[0], nil
}

func (s *Storage) Delete{{$modelName}}(ctx context.Context, input Delete{{$modelName}}Input) (*models.{{.ModelName}}, error) {
  builder := br.NewDeleteBuilder().
    From(string({{$modelName}}_TableName)).
    {{- range .ModelFields}}
    {{- if eq .FieldBadge "pk"}}
    Where(sq.Eq{string({{.FieldName}}_{{$modelName}}_Field): input.{{.FieldName}}}).
    {{- end}}
    {{- end}}
    Suffix(suffixReturning)

  model, err := pg.DoQueryContext[*models.{{$modelName}}](ctx, s.client.Executor(ctx), builder)
  if err != nil {
    return nil, err
  }
  return model[0], nil
}
