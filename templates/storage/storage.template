// Code generated by Boiler; DO NOT EDIT.

package storage

import (
  {{- range .StoragePackages}}
  {{.ImportAlias}} "{{.ImportLine}}"
  {{- end}}
)

type Storage struct {
  executor pg.Executor
}

func NewStorage(executor pg.Executor) *Storage {
  return &Storage{
    executor: executor,
  }
}

func (s *Storage) WithTransaction(ctx context.Context, fTx func(*Storage) error) error {
  defer func() {
    if rec := recover(); rec != nil {
      log.Errorf("client.WithTransaction: panic recovered: %v", rec)
    }
  }()

  tx, err := s.executor.Begin(ctx)
  if err != nil {
    return fmt.Errorf("s.executor.BeginTx: %w", err)
  }
  txStorage := NewStorage(tx)

  if err = fTx(txStorage); err != nil {
    if errTx := tx.Rollback(ctx); errTx != nil {
      log.Errorf("Storage.WithTransaction: tx.Rollback: %v", errTx)
    }
    return err
  }

  if txErr := tx.Commit(ctx); txErr != nil {
    return fmt.Errorf("tx.Commit: %w", err)
  }
  return nil
}

