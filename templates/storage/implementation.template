// Code generated by Boiler; DO NOT EDIT.

package {{toLowerCamelCase .ModelName}}_storage

import (
  "context"
  "fmt"

  sq "github.com/Masterminds/squirrel"
)

type {{.ModelName}}Storage struct {
  client Client
}

func New{{.ModelName}}Storage(client Client) {{.ModelName}}Storage {
  return &{{toLowerCamelCase .ModelName}}Storage{
    client: client,
  }
}

func (s *{{toLowerCamelCase .ModelName}}Storage) {{.ModelName}}s(ctx context.Context, input {{.ModelName}}Input) ([]*{{.ModelName}}, error) {
  builder := newSelectBuilder().
    Columns(
      {{- range .ModelFields}}
      string({{.FieldName}}{{.ModelName}}Field),
      {{- end}}
    ).
    From(string({{.ModelName}}TableName))

  if err := input.Pagination.validate(); err != nil {
    return nil, fmt.Errorf("pagination.Validate: %w", err)
  }

  offset, limit := input.Pagination.orDefault().toOffsetLimit()
  builder = builder.Offset(offset).Limit(limit)

  if input.Sort != nil {
    builder = builder.OrderBy(input.Sort.{{toLowerCamelCase .ModelName}}Sort())
  }

  filters := input.Filters

  {{- range .ModelFields}}
  {{- range .ModelsFieldFilters}}
  if {{withIfCondition .FilterName}} {
    builder = builder.Where(sq.Eq{string({{.FieldName}}): filters.{{.FilterName}}{{withDot .FilterTypeSuffix}}})
  }
  {{- end}}
  {{- end}}

  return doQueryContext[*{{.ModelName}}](ctx, s.client, builder)
}

func (s *{{toLowerCamelCase .ModelName}}Storage) {{.ModelName}}(ctx context.Context, input {{.ModelName}}Input) (*{{.ModelName}}, error) {
  builder := newSelectBuilder().
    Columns(
      {{- range .ModelFields}}
      string({{.FieldName}}{{.ModelName}}Field),
      {{- end}}
    ).
    From(string({{.ModelName}}TableName))

  filters := input.Filters

  {{- range .ModelFields}}
  {{- range .ModelFieldFilters}}
  if {{withIfCondition .FilterName}} {
    builder = builder.Where(sq.Eq{string({{.FieldName}}): filters.{{.FilterName}}{{withDot .FilterTypeSuffix}}})
  }
  {{- end}}
  {{- end}}

  models, err := doQueryContext[*{{.ModelName}}](ctx, s.client, builder)
  if err != nil {
    return nil, err
  }
  return models[0], nil
}

func (s *{{toLowerCamelCase .ModelName}}Storage) Put{{.ModelName}}(ctx context.Context, input Put{{.ModelName}}Input) (*{{.ModelName}}, error) {
  builder := newInsertBuilder().
    Into(string({{.ModelName}}TableName))

  fields := map[string]any{
    {{- range .ModelFields}}
    {{if eq .NotNullField true}}
    string({{.FieldName}}{{.ModelName}}Field): input.{{.FieldName}},
    {{end}}
    {{- end}}
  }

  {{- range .ModelFields}}
  {{if eq .NotNullField false}}
  if input.{{.FieldName}}.Ptr() != nil {
    fields[string({{.FieldName}}{{.ModelName}}Field)] = input.{{.FieldName}}{{withDot .FieldTypeSuffix}}
  }
  {{end}}
  {{- end}}

  builder = builder.SetMap(fields)

  if err := doExecContext(ctx, s.client, builder); err != nil {
    return nil, err
  }

  model := &{{.ModelName}}{
    {{- range .ModelFields}}
    {{.FieldName}}: input.{{.FieldName}},
    {{- end}}
  }

  return model, nil
}

func (s *{{toLowerCamelCase .ModelName}}Storage) Update{{.ModelName}}(ctx context.Context, input Update{{.ModelName}}Input) (*{{.ModelName}}, error) {
  builder := newUpdateBuilder().
    Table(string({{.ModelName}}TableName))

  fields := map[string]any{
    {{- range .ModelFields}}
    {{if eq .NotNullField true}}
    {{if neq .FieldBadge "pk"}}
    string({{.FieldName}}{{.ModelName}}Field): input.{{.FieldName}},
    {{end}}
    {{end}}
    {{- end}}
  }

  {{- range .ModelFields}}
  {{if eq .NotNullField false}}
  {{if neq .FieldBadge "pk"}}
  if input.{{.FieldName}}.Ptr() != nil {
    fields[string({{.FieldName}}{{.ModelName}}Field)] = input.{{.FieldName}}{{withDot .FieldTypeSuffix}}
  }
  {{end}}
  {{end}}
  {{- end}}

  builder = builder.SetMap(fields)

  if err := doExecContext(ctx, s.client, builder); err != nil {
    return nil, err
  }

  model := &{{.ModelName}}{
    {{- range .ModelFields}}
    {{.FieldName}}: input.{{.FieldName}},
    {{- end}}
  }

  return model, nil
}

func (s *{{toLowerCamelCase .ModelName}}Storage) Delete{{.ModelName}}(ctx context.Context, input Delete{{.ModelName}}Input) error {
  builder := newDeleteBuilder().
    From(string({{.ModelName}}TableName)).
    {{- range .ModelFields}}
    {{if eq .FieldBadge "pk"}}
    Where(sq.Eq{string({{.FieldName}}{{.ModelName}}Field): input.{{.FieldName}}})
    {{end}}
    {{- end}}

  return doExecContext(ctx, s.client, builder)
}
