// Code generated by Boiler; DO NOT EDIT.
package kafkaoutbox

import (
  {{- range .OutboxStoragePackages}}
  {{.ImportAlias}} "{{.ImportLine}}"
  {{- end}}
)

type storage struct {
  executor  pg.Executor
  lockTTL   time.Duration
  batchSize uint32
}

func NewStorage(executor pg.Executor, lockTTL time.Duration, batchSize uint32) Storage {
  return &storage{
    executor:  executor,
    lockTTL:   lockTTL,
    batchSize: batchSize,
  }
}

func (s *storage) BatchRecords(ctx context.Context, tableName string) ([]*Record, error) {
  query := `update %s
    set locked_until = now() + interval '%d millisecond'
    where id in (select id
        from %[1]s
        where locked_until is null or locked_until < now()
        limit %d)
    returning *`

  query = fmt.Sprintf(query, tableName, s.lockTTL.Milliseconds(), s.batchSize)

  return pg.SelectCtx[*Record](ctx, s.executor, sq.Expr(query))
}

func (s *storage) DeleteRecord(ctx context.Context, tableName, recordID string) error {
  query := fmt.Sprintf(`delete from %s where id = '%s'`, tableName, recordID)

  return pg.ExecCtx(ctx, s.executor, sq.Expr(query))
}
