// Code generated by Boiler; DO NOT EDIT.
package kafkaoutbox

import (
  {{- range .OutboxConfigPackages}}
  {{.ImportAlias}} "{{.ImportLine}}"
  {{- end}}
)

type Config struct {
  KafkaBrokersAddr []string      `yaml:"kafka_brokers_addr"`
  RecordLockTime   time.Duration `yaml:"record_lock_time"`
  RecordsBatchSize uint32        `yaml:"records_batch_size"`
  WorkerIdle       time.Duration `yaml:"worker_idle"`
  WorkersCount     uint32        `yaml:"workers_count"`
  JitterFactor     time.Duration `yaml:"jitter_factor"`
}

func NewConfig(path string) (Config, error) {
  buf, err := os.ReadFile(path)
  if err != nil {
    return Config{}, fmt.Errorf("file reading failed: %w", err)
  }
  type wrapped struct {
    Config *Config `yaml:"kafka_outbox"`
  }
  config := wrapped{}

  if err = yaml.Unmarshal(buf, &config); err != nil {
    return Config{}, fmt.Errorf("yaml unmarshalling failed: %w", err)
  }
  if err = config.Config.Validate(); err != nil {
    return Config{}, fmt.Errorf("config validation error: %w", err)
  }
  return *config.Config, nil
}

func (c *Config) Validate() error {
  return validation.ValidateStruct(c,
    validation.Field(&c.KafkaBrokersAddr,
      validation.Each(validation.Required),
    ),
    validation.Field(&c.RecordLockTime,
      validation.Min(100*time.Millisecond),
      validation.Max(5*time.Second),
    ),
    validation.Field(&c.RecordsBatchSize,
      validation.Min(uint32(25)),
      validation.Max(uint32(100)),
    ),
    validation.Field(&c.WorkerIdle,
      validation.Required,
      validation.Min(100*time.Millisecond),
      validation.Max(1*time.Second),
    ),
    validation.Field(&c.WorkersCount,
      validation.Required,
      validation.Min(uint32(1)),
      validation.Max(uint32(5)),
    ),
    validation.Field(&c.JitterFactor,
      validation.Required,
      validation.Min(100*time.Millisecond),
      validation.Max(1*time.Second),
    ),
  )
}